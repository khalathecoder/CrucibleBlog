@model CrucibleBlog.Models.BlogPost
@using CrucibleBlog.Services.Interfaces
@inject IImageService _ImageService


@using CrucibleBlog.Enums;

@inject IBlogService _BlogPostService

@{
	ViewData["Title"] = "Edit";
}

<style>
	.ck-editor__editable_inline {
		min-height: 600px;
	}

	input.largerCheckbox {
		width: 30px;
		height: 30px;
	}

	label.form-check-label {
		font-size: 22px;
	}
</style>
<div class="post-single-wrapper axil-section-gap bg-color-white">
	<div class="container">
		<h1>Edit</h1>
		<h4>BlogPost</h4>
	</div>
	<hr />
	<main class="container mt-5">
		<form asp-action="Edit" asp-controller="BlogPosts" method="post" enctype="multipart/form-data">
			<div asp-validation-summary="ModelOnly" class="text-danger"></div>
			@*<input type="hidden" asp-for="Slug" />*@
			<input type="hidden" asp-for="Id" />
			<input type="hidden" asp-for="CreatedDate" />
			@*<input type="hidden" asp-for="UpdatedDate" />*@
			<input type="hidden" asp-for="ImageData" />
			<input type="hidden" asp-for="ImageType" />
			<div class="row">
				<div class="col-12 col-lg-4">
					<div class="form-group">
						<label asp-for="ImageFile" class="control-label">Blog Post Image</label>
						<img class="img-fluid border rounded-3 mb-2" style="max-height: 350px;" src="@_ImageService.ConvertByteArrayToFile(Model.ImageData!,Model.ImageType!,(int)DefaultImage.BlogPostImage)" id="blogImage">
						<input asp-for="ImageFile" type="file" class="form-control mt-3 pt-2" accept=".png,.jpg,.jpeg,.gif"
		  onchange="document.getElementById('blogImage').src = window.URL.createObjectURL(this.files[0])" />
					</div>
					<div class="form-group">
						<label asp-for="Title" class="control-label"></label>
						<input asp-for="Title" class="form-control" />
						
					</div>
					<div class="form-group">
						<label asp-for="Abstract" class="control-label"></label>
						<textarea asp-for="Abstract" class="form-control" rows="1"></textarea>
						<span asp-validation-for="Abstract" class="text-danger"></span>
					</div>
					<div class="form-group">
						<label asp-for="CategoryId" class="control-label">Category</label>
						<select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
					</div>
				</div>
				<div class="col-12 col-lg-8">
					<div class="form-group">
						<label asp-for="Content" class="control-label"></label>
						<textarea asp-for="Content" class="editor form-control"></textarea>
						<span asp-validation-for="Content" class="text-danger"></span>
					</div>
					<div class="form-group" id="tagContainer">
						<label asp-for="Tags"></label>
						<input class="form-control" type="text" id="tagInput" name="StringTags" autocomplete="off" value="@ViewBag.Tags" />
						<div class="tagcloud axil-single-widget mt-2" style="display:none">
							@foreach (Tag tag in await _BlogPostService.GetTagsAsync())
							{
								<a onclick="addTag(this)">@tag.Name</a>
							}
						</div>
					</div>
				</div>
			</div>
			<div class="form-group d-flex justify-content-end">
				<label class="form-check-label me-4 mt-2" asp-for="IsPublished">Publish?</label>
				<input class="largerCheckbox me-8" type="checkbox" asp-for="IsPublished" />
				<span asp-validation-for="IsPublished" class="text-danger"></span>
			</div>
			<div class="form-group d-flex justify-content-end">
				<label class="form-check-label me-4 mt-2" asp-for="IsDeleted">Delete?</label>
				<input class="largerCheckbox me-8" type="checkbox" asp-for="IsDeleted" />
				<span asp-validation-for="IsDeleted" class="text-danger"></span>
			</div>
			<div class="form-group d-flex justify-content-end">
				<input type="submit" value="Save" class="btn btn-primary" />
			</div>
		</form>
		<div class="form-group mt-5 start-0">
			<a asp-action="AdminPage">< Admin Page</a>
		</div>
	</main>
</div>

<div>
	<a asp-action="Index">Back to List</a>
</div>


@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
	<!--CK Editor-->
	<script src="https://cdn.ckeditor.com/ckeditor5/37.1.0/classic/ckeditor.js"></script>

	<script>
		ClassicEditor
			.create(document.querySelector('.editor'), {
				licenseKey: '',
			})
			.then(editor => {
				window.editor = editor;
			});
	</script>

	<script>
		// override the jQuery ":contains" selector to make it case insensitive
		jQuery.expr[':'].contains = function (a, i, m) {
			return $(a).text().toUpperCase()
				.indexOf(m[3].toUpperCase()) >= 0;
		};

		$(document).ready(function () { //when document loads
			let inputTags = $('#tagInput').val().split(',');

			inputTags.forEach(tag => { //checks to see if tag is already inserted so it is already disabled from the beginning
				if (tag.trim() == '') return;

				let tagElement = $('.tagcloud > a:contains(' + tag.trim() + ')');

				if (tagElement.text().trim().toLowerCase() == tag.trim().toLowerCase()) {
					tagElement.addClass('disabledTag');
				}
			});

			$('#tagInput').focus(function () { //when click on tags area it will show tags below
				$('.tagcloud').show(300);
			});

			$('form *:not("#tagInput")').focus(function () {  
				if ($('.tagcloud').is(':visible')) {
					$('.tagcloud').hide(300);
				}
			});

			$('#tagInput').keyup(function () { /*aka document.querySelector('#tagInput').addEventlIsterner('keyup', function()) in plain js*/
				//get the text they are searching with
				$('.disabledTag').each(function () {
					$(this).removeClass('disabledTag');
				})

				//get the text 
				let inputText = $('#tagInput').val();
				let inputTags = inputText.split(',');				
				let searchString = inputTags.pop().trim();

				//hide all the tags that do not contain that text
				$('.tagcloud > a:contains(' + searchString + ')').show(); //show the ones they have typed
				$('.tagcloud > a:not( :contains(' + searchString + ') )').hide(); //hide the ones they not have typed
				//$('.tagcloud > a:contains(' rubber du ')');



				//toggle the disabled Tag class based oon current input
				inputTags.forEach(tag=>{ //disable them all then reenable them all
					if (tag.trim() == '') return;

					let tagElement = $('.tagcloud > a:contains(' + tag.trim() + ')');

					if (tagElement.text().trim().toLowerCase() == tag.trim().toLowerCase()) {
						tagElement.addClass('disabledTag')
					}
				});
			});

		});


		function addTag(tagElement) {
			let input = document.getElementById('tagInput');

			if (tagElement.classList.contains('disabledTag')) {
				input.focus();
				return;
			}

			let tagName = tagElement.textContent + ', ';

			let currentTags = input.value.split(',');

			currentTags.pop();
			currentTags.push(tagName);

			input.value = currentTags.reduce((inputString, currentString) => inputString + ", " + currentString.trim());

			input.focus();

			$('.tagcloud > a').show()
			tagElement.classList.add('disabledTag');
		}
	</script>
}